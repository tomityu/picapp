<header class="navbar navbar-fixed-top navbar-inverse">
    <div class="container">
        <%= image_tag 'tomistagram_logo.png', class: 'logo' %>
    </div>
</header>

<div class="swiper">
    <div class="swiper-wrapper" id="pictures">
        <% @pictures.each do |picture| %>
            <div class="swiper-slide"><%= image_tag picture.file %></div>
        <% end %>
        <% (15 - @pictures.count).times do %>
            <div class="swiper-slide" id='dummy'><%= image_tag 'dummy.png', class: 'dummy-image' %></div>
        <% end %>
    </div>
    <div class="swiper-button-prev"></div>
    <div class="swiper-button-next"></div>
</div>
<dialog id="modalDialog" class="dialog" style="display: none;">
    <div class="dialog-container" id="dialog-container">
        <header class="dialog-header">
            <img class="user-image" id="userImage" src="xxx">
            <span id="modalTitle">yuki tomitaさんから写真が届きました！</span>
        </header>
        <div class="dialog-content">
            <img id="modalImage" src="xxx">
        </div>
    </div>
</dialog>
<script>
    const newPictures = []
    let isShowing = false
    let totalNewPictureCount = 0
    const pictures = document.getElementById('pictures');
    const modal = document.getElementById('modalDialog');
    const modalTitle = document.getElementById('modalTitle');
    const modalImage = document.getElementById('modalImage');
    const userImage = document.getElementById('userImage');
    const adjuster = `<div class="swiper-slide", id="adjuster"></div>`;
    const modalOpen = () => {
        modal.removeAttribute("style")
        modal.showModal();
    }
    modal.addEventListener("close", async(e) => {
        await waitDialogAnimation(e.target)
        modal.style.display = "none"
    })
    const waitDialogAnimation = (dialog) => Promise.allSettled(
        Array.from(dialog.getAnimations()).map(animation => animation.finished)
    );
    const showPictureOnModal = (tempPictures, index) => {
        const picture = tempPictures[index]
        if (picture === undefined) {
            isShowing = false
            return
        }
        modalTitle.textContent = `${picture.user_name} さんから写真が届きました！`
        modalImage.setAttribute('src', picture.file_path)
        userImage.setAttribute('src', picture.user_image)
        modalImage.onload = () => {
            modalOpen()
            let element = document.getElementById('dummy')
            if (element) {
                element.remove()
            } else {
                Array.from(pictures.children).forEach(child => {
                    if (child.id === 'adjuster') { child.remove() }
                })
                Array(2 - totalNewPictureCount % 3).fill().forEach(() => {
                    pictures.insertAdjacentHTML('beforeend', adjuster);
                })
            }
            const html = `<div class="swiper-slide"><img src="${picture.file_path}"></div>`;
            pictures.insertAdjacentHTML('beforeend', html);
            mySwiper.update()
            totalNewPictureCount++
            setTimeout(() => {
                modal.close();
                index++
                setTimeout(() => {
                    showPictureOnModal(tempPictures, index)
                }, 200)
            }, 5000)
        }
    }
    const startShowNewPictures = () => {
        isShowing = true
        const tempPictures = newPictures.map(picture => ({ user_name: picture.user_name, user_image: picture.user_image, file_path: picture.file_path }))
        if (tempPictures.length === 0) {
            isShowing = false
            return
        }
        newPictures.splice(0)
        showPictureOnModal(tempPictures, 0)
    }
    setInterval(() => {
        if (!isShowing) {
            startShowNewPictures()
        }
    }, 1000);
    const mySwiper = new Swiper ('.swiper', {
        loop: true,
        speed: 1000,
        slidesPerView: 4,
        spaceBetween: 0,
        direction: 'horizontal',
        effect: 'slide',
        grid: {
            //fill: 'row',
            rows: 3,
        },

        autoplay: {
            delay: 2000,
            stopOnLast: false,
            disableOnInteraction: false
        },
    
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
    });
</script>